{"version":3,"sources":["components/Statistic/Statistic.js","components/FeedbackOptions/FeedbackOptions.js","components/Section/Section.js","components/Notification/Notification.js","App.js","index.js"],"names":["Statistic","good","neutral","bad","totalCount","goodPercnt","className","FeedbackOptions","types","onIncrement","map","type","onClick","shortid","generate","Section","title","children","Notification","App","useState","setGood","setNeutral","setBad","countTotalFeedback","feedbackType","prev","Math","ceil","ReactDOM","render","document","getElementById"],"mappings":"6NAoBeA,EAhBG,SAAC,GAAoD,IAAlDC,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,QAASC,EAAkC,EAAlCA,IAAKC,EAA6B,EAA7BA,WAAYC,EAAiB,EAAjBA,WACnD,OACE,qBAAKC,UAAU,sBAAf,SACE,qBAAIA,UAAU,mBAAd,UACE,qBAAIA,UAAU,kBAAd,mBAAuCL,KACvC,qBAAIK,UAAU,qBAAd,sBAA6CJ,KAC7C,qBAAII,UAAU,iBAAd,kBAAqCH,KACrC,qBAAIG,UAAU,mBAAd,oBAAyCF,KACzC,qBAAIE,UAAU,sBAAd,gCACsBD,EADtB,c,gBCOOE,G,MAfS,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,YAChC,OACE,qBAAKH,UAAU,mBAAf,SACGE,EAAME,KAAI,SAACC,GAAD,OACT,wBAEEA,KAAK,SACLC,QAAS,kBAAMH,EAAYE,IAH7B,SAKGA,GAJIE,IAAQC,mBCMRC,EAZC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,gCACE,6BAAKD,IAAYC,MCARC,G,MAHM,SAAC,GAAe,IAAbF,EAAY,EAAZA,MACtB,OAAO,oBAAIV,UAAU,qBAAd,SAAoCU,M,MCG9B,SAASG,IACtB,MAAwBC,mBAAS,GAAjC,mBAAOnB,EAAP,KAAaoB,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOlB,EAAP,KAAgBoB,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAOjB,EAAP,KAAYoB,EAAZ,KAkBMC,EAAqB,WACzB,OAAOtB,EAAUD,EAAOE,GAO1B,OACE,sBAAKG,UAAU,mBAAf,UACE,cAAC,EAAD,CAASU,MAAM,wBAAf,SACE,cAAC,EAAD,CACER,MAAO,CAAC,OAAQ,UAAW,OAC3BC,YA7BgB,SAACgB,GACvB,OAAQA,GACN,IAAK,OACHJ,GAAQ,SAACK,GAAD,OAAUA,EAAO,KACzB,MACF,IAAK,UACHJ,GAAW,SAACI,GAAD,OAAUA,EAAO,KAC5B,MACF,IAAK,MACHH,GAAO,SAACG,GAAD,OAAUA,EAAO,KACxB,MACF,QACE,aAoBF,cAAC,EAAD,CAASV,MAAM,aAAf,SACGQ,IAAuB,EACtB,cAAC,EAAD,CACEvB,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,WAAYoB,IACZnB,WAlBDJ,EAAO,EAAI0B,KAAKC,KAAa,IAAP3B,EAAcuB,KAAwB,IAqB7D,cAAC,EAAD,CAAcR,MAAM,2BCjD9Ba,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,U","file":"static/js/main.32bf09c3.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Statistic.css\";\r\nimport \"./Statistic.css\";\r\n\r\nconst Statistic = ({ good, neutral, bad, totalCount, goodPercnt }) => {\r\n  return (\r\n    <div className=\"feedback-statistica\">\r\n      <ul className=\"statistica_items\">\r\n        <li className=\"statistica_good\">Good: {good}</li>\r\n        <li className=\"statistica_neutral\">Neutral: {neutral}</li>\r\n        <li className=\"statistica_bad\">Bad: {bad}</li>\r\n        <li className=\"statistica_total\">Total: {totalCount}</li>\r\n        <li className=\"statistica_positive\">\r\n          Positive Feedback: {goodPercnt} %\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Statistic;\r\n","import React from \"react\";\r\nimport shortid from \"shortid\";\r\nimport \"./FeedbackOptions.css\";\r\n\r\nconst FeedbackOptions = ({ types, onIncrement }) => {\r\n  return (\r\n    <div className=\"feedback-buttons\">\r\n      {types.map((type) => (\r\n        <button\r\n          key={shortid.generate()}\r\n          type=\"button\"\r\n          onClick={() => onIncrement(type)}\r\n        >\r\n          {type}\r\n        </button>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\nexport default FeedbackOptions;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Section = ({ title, children }) => {\r\n  return (\r\n    <div>\r\n      <h1>{title}</h1>{children}\r\n    </div>\r\n  );\r\n};\r\n\r\nSection.propTypes = {\r\n    title: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Section;","import React from \"react\";\r\nimport \"./Notification.css\"\r\n\r\nconst Notification = ({ title }) => {\r\n  return <h1 className=\"Notification-title\">{title}</h1>;\r\n};\r\nexport default Notification;\r\n","import { useState } from \"react\";\r\nimport Statistic from \"./components/Statistic\";\r\nimport FeedbackOptions from \"./components/FeedbackOptions\";\r\nimport Section from \"./components/Section\";\r\nimport Notification from \"./components/Notification\";\r\nimport \"./App.css\";\r\n\r\nexport default function App() {\r\n  const [good, setGood] = useState(0);\r\n  const [neutral, setNeutral] = useState(0);\r\n  const [bad, setBad] = useState(0);\r\n\r\n  const onLeaveFeedback = (feedbackType) => {\r\n    switch (feedbackType) {\r\n      case \"good\":\r\n        setGood((prev) => prev + 1);\r\n        break;\r\n      case \"neutral\":\r\n        setNeutral((prev) => prev + 1);\r\n        break;\r\n      case \"bad\":\r\n        setBad((prev) => prev + 1);\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const countTotalFeedback = () => {\r\n    return neutral + good + bad;\r\n  };\r\n\r\n  const countPositiveFeedbackPercentage = () => {\r\n    return good > 0 ? Math.ceil((good * 100) / countTotalFeedback()) : 0;\r\n  };\r\n\r\n  return (\r\n    <div className=\"feedback-wrapper\">\r\n      <Section title=\"Please Leave Feedback\">\r\n        <FeedbackOptions\r\n          types={[\"good\", \"neutral\", \"bad\"]}\r\n          onIncrement={onLeaveFeedback}\r\n        />\r\n      </Section>\r\n      <Section title=\"Statistics\">\r\n        {countTotalFeedback() > 0 ? (\r\n          <Statistic\r\n            good={good}\r\n            neutral={neutral}\r\n            bad={bad}\r\n            totalCount={countTotalFeedback()}\r\n            goodPercnt={countPositiveFeedbackPercentage()}\r\n          />\r\n        ) : (\r\n          <Notification title=\"No feedback given\" />\r\n        )}\r\n      </Section>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from \"./App\"\n\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}